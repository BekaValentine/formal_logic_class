#! /usr/bin/python
import re
import sys

def parse_commands(defs):
    cmds = {}
    def_pattern = r'\s*\\newcommand\s*\{\s*\\([a-zA-Z]+)\s*\}\s*(\[\s*\d+\s*\]\s*)?\{(.*)\}\s*'
    for l in defs.split('\n'):
        m = re.search(def_pattern, l)
        if not m:
            print('ERROR BAD NEWCOMMAND: ', l)
            exit()
        
        (name, args, body) = m.groups()
        if args:
            args = int(args[1:-1])
        cmds[name] = (args, body)

    return cmds

def process(defs, string, checked):
    cmds = parse_commands(defs)
    cmd_pattern = r'\\([a-zA-Z]+)((\{[^{}]*\})+)'
    arg_pattern = r'\{([^{}]*)\}'
    while True:
        m = re.search(cmd_pattern, string)
        if not m:
            break
        
        (start, end) = m.span()
        (cmd, args, _) = m.groups()
        args = re.findall(arg_pattern, args)
        
        if cmd in cmds:
            (arg_count, body) = cmds[cmd]
            # print('CMD,ARGS', cmd, args)
            # print('BODY', body)
            for i in range(1, arg_count+1):
                body = body.replace(f'#{i}', args[i-1])
                # print('BODY', body)
            string = string[:start] +\
                     body +\
                     string[end:]
        else:
            if checked:
                print(f'Unknown command: {cmd}')
                exit()
            else:
                string = string[:start] +\
                        ' '.join(args) +\
                        string[end:]

    
    return string

if __name__ == '__main__':
    with open(sys.argv[1], 'r') as defsf:
        defs = defsf.read()
    
    with open(sys.argv[2], 'r') as stringf:
        string = stringf.read()
    
    checked = False
    if len(sys.argv) > 3:
        if sys.argv[3] == '--checked':
            checked = True

    print(process(defs, string, checked))